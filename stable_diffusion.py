# -*- coding: utf-8 -*-
"""Stable_Diffusion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z94h-pBoOso6kdSytuHho1FS75zggxyC
"""

pip install diffusers transformers accelerate

from PIL import Image
from diffusers import StableDiffusionPipeline
import torch
import time
from IPython.display import display, clear_output, Image
import os
from IPython.display import Image as IPImage

"""# 이미지 생성

## 이미지
"""

model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")  # GPU 사용

# 3. 텍스트 프롬프트 입력 (지브리 스타일 마을 풍경)
prompt = "A cheerful Pikachu standing in a sunny meadow surrounded by flowers, in a cartoon style"


# 4. 이미지 생성
image = pipe(prompt).images[0]

# 5. 결과 저장 및 표시
image.save("generated_image.png")
print("이미지가 생성되었습니다: generated_image.png")

# Colab에서 생성된 이미지 보기

display(image)

"""## 애니메이션"""

# Stable Diffusion 모델 로드
model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")  # GPU 사용

# 기본 프롬프트 설정
base_prompt = "A cheerful Pikachu standing in a sunny meadow surrounded by flowers, in a cartoon style"

# 프레임마다 약간의 변화 추가
prompts = [
    base_prompt + ", with a gentle breeze blowing the flowers",
    base_prompt + ", with butterflies flying around",
    base_prompt + ", with Pikachu waving its hand",
    base_prompt + ", with the sun setting in the background",
    base_prompt + ", with stars beginning to appear in the sky"
]

# 각 프롬프트에 따라 이미지 생성
images = []
for prompt in prompts:
    print(f"Generating image for prompt: {prompt}")
    try:
        image = pipe(prompt).images[0]
        images.append(image)
    except Exception as e:
        print(f"Error generating image: {e}")
        images.append(Image.new("RGB", (512, 512), "black"))  # 검은색 이미지 추가

# 이미지 크기 통일
images = [img.resize((512, 512)) for img in images]

# 생성된 이미지 출력
print("Generated images:")
for i, img in enumerate(images):
    img.show(title=f"Image {i+1}")

# GIF 저장
gif_file = "pikachu_animation.gif"
try:
    images[0].save(
        gif_file,
        save_all=True,
        append_images=images[1:],  # 나머지 이미지 추가
        duration=500,             # 각 프레임 지속 시간 (ms)
        loop=3                    # GIF를 3번 반복 재생
    )
    print(f"GIF saved as {gif_file}")
except Exception as e:
    print(f"Error saving GIF: {e}")

# GIF 파일 확인
if os.path.exists(gif_file):
    print("GIF file successfully created!")
else:
    print("GIF file creation failed.")

# GIF 파일 경로
gif_file = "/content/pikachu_animation.gif"

# GIF 출력
Image(filename=gif_file)

"""## 짧은 스토리 진행"""

# Stable Diffusion 모델 로드
model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")  # GPU 사용

# 탐험 스토리 프롬프트
prompts = [
    "A cheerful Pikachu standing at the entrance of a lush green forest, with sunlight streaming through the trees, ready for an adventure.",
    "Pikachu standing by a small sparkling lake in the middle of the forest, looking at its reflection in the water.",
    "Pikachu happily playing with an Eevee in a sunny forest clearing, surrounded by flowers and butterflies.",
    "Pikachu hiding under a large tree in the forest as rain pours down, with thunder and lightning in the background.",
    "Pikachu walking peacefully through a glowing forest after the rain, with a beautiful rainbow in the sky."
]

# 이미지 생성 및 저장
images = []
for i, prompt in enumerate(prompts):
    image = pipe(prompt).images[0]  # 이미지 생성
    image.save(f"frame_{i}.png")   # 이미지 저장
    images.append(image)

# GIF 생성
from PIL import Image

images[0].save(
    "pikachu_exploration.gif",
    save_all=True,
    append_images=images[1:],
    duration=700,  # 프레임 지속 시간 (밀리초)
    loop=0         # 반복 횟수 (0은 무한 반복)
)

print("애니메이션 생성 완료!")

from PIL import Image

# 이미지 파일 로드
image_files = ["frame_0.png", "frame_1.png", "frame_2.png", "frame_3.png", "frame_4.png"]
images = [Image.open(img) for img in image_files]

# GIF 생성
images[0].save(
    "pikachu_exploration.gif",
    save_all=True,
    append_images=images[1:],
    duration=700,  # 프레임 지속 시간 (밀리초)
    loop=0         # 반복 횟수 (0은 무한 반복)
)

print("GIF 생성 완료!")

from IPython.display import Image as IPImage
display(IPImage(filename="pikachu_exploration.gif"))

"""## 자연스러운 gif 만들기"""

import torch
from diffusers import StableDiffusionPipeline
from PIL import Image

# Stable Diffusion 모델 로드
model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")
pipe.enable_attention_slicing()  # 메모리 효율화

# 일관된 캐릭터와 배경을 위한 상세한 프롬프트
character_desc = "cute yellow Pikachu with red cheeks, anime style, high quality, detailed, 4k"
scene_style = "Studio Ghibli style background, soft lighting, detailed environment"
negative_prompt = "ugly, deformed, noisy, blurry, low quality, distorted, disfigured, bad anatomy"

# 연속된 스토리라인을 가진 프롬프트
prompts = [
    f"{character_desc}, standing at the entrance of a magical forest path, {scene_style}, morning sunlight filtering through trees, peaceful atmosphere",
    f"{character_desc}, discovering a hidden crystal clear lake in the same forest, {scene_style}, reflections in water, same forest environment",
    f"{character_desc}, meeting a friendly brown Eevee in the same forest clearing, {scene_style}, playful interaction, forest flowers around them",
    f"{character_desc}, seeking shelter with Eevee under a large tree during rain, {scene_style}, gentle rain effects, cozy atmosphere",
    f"{character_desc}, walking with Eevee through the same forest path as morning, {scene_style}, rainbow appearing after rain, golden sunset light"
]

# 이미지 생성
images = []
seed = 21  # 일관성을 위한 기본 시드

for i, prompt in enumerate(prompts):
    # 각 이미지마다 약간의 변화를 주되, 기본 시드와 연관되게 설정
    generator = torch.Generator("cuda").manual_seed(seed + i)

    image = pipe(
        prompt,
        negative_prompt=negative_prompt,
        num_inference_steps=50,
        guidance_scale=7.5,
        generator=generator
    ).images[0]

    # 이미지 크기 일관성 유지
    image = image.resize((512, 512), Image.LANCZOS)
    image.save(f"frame_{i}.png")
    images.append(image)

# GIF 생성 - 단순하게 프레임 전환
images[0].save(
    "pikachu_story.gif",
    save_all=True,
    append_images=images[1:],
    duration=1000,  # 각 장면을 1초씩 보여줌
    loop=0
)

print("스토리 애니메이션 생성 완료!")

from IPython.display import Image as IPImage
display(IPImage(filename="pikachu_story.gif"))

"""## 새로운 스토리 gif"""

import torch
from diffusers import StableDiffusionPipeline
from PIL import Image

# 모델 로드
model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")
pipe.enable_attention_slicing()

# 프롬프트 설정
prompts = [
    "white bunny eating pink flowers, soft fur, big eyes, cute anime style, pastel colors",
    "fluffy rabbit munching flowers, garden setting, sparkly eyes, soft lighting",
    "white bunny surrounded by flowers, gentle pose, chibi style, spring mood",
    "cute rabbit with floppy ears, eating flower petals, pastel garden"
]

# 네거티브 프롬프트
negative_prompt = "realistic, scary, dark, gore, dirty, photographic, human, detailed fur"

# 이미지 생성 설정
seed = 42
images = []

for i, prompt in enumerate(prompts):
    generator = torch.Generator("cuda").manual_seed(seed + i)

    image = pipe(
        prompt,
        negative_prompt=negative_prompt,
        num_inference_steps=50,
        guidance_scale=7.5,
        generator=generator
    ).images[0]

    image = image.resize((512, 512), Image.LANCZOS)
    image.save(f"bunny_story_{i+1}.png")
    images.append(image)

# 각 장면별 지속 시간 설정 (밀리초)
durations = [2500, 2500, 2500, 3000]

# GIF 생성
images[0].save(
    "bunny_eating_flowers.gif",
    save_all=True,
    append_images=images[1:],
    duration=durations,
    loop=0
)

print("토끼 스토리 애니메이션 생성 완료!")

from IPython.display import Image as IPImage
display(IPImage(filename="bunny_eating_flowers.gif"))